{
  "funnel_name": "mf_analyser_funnel",
  "project_id": "epifi_sandbox_tech",
  "dataset": "sandbox",
  "data_source": "epifi_datalake_tech.events.analyser_events_v2",
  "user_base_table": "epifi_datamart_tech.an_central.user_base_fact",
  "time_period_days": 90,
  "steps": [
    {
      "rank": 1,
      "screen_name": "LoadedConsentScreen",
      "loaded_events": ["LoadedConsentScreen", "MFPrefillPanScreenLoaded"],
      "filters": {
        "event_name": "in ('LoadedConsentScreen', 'MFPrefillPanScreenLoaded')"
      }
    },
    {
      "rank": 2,
      "screen_name": "InteractedConsentScreen",
      "loaded_events": ["InteractedOnConsentScreen", "MFPrefillPanScreenActioned"],
      "filters": {
        "event_name": "in ('InteractedOnConsentScreen', 'MFPrefillPanScreenActioned')"
      }
    },
    {
      "rank": 3,
      "screen_name": "LoadedEnterOTPScreen",
      "loaded_events": ["LoadedEnterOTPScreen"],
      "filters": {
        "event_name": "= 'LoadedEnterOTPScreen'"
      }
    },
    {
      "rank": 4,
      "screen_name": "ClickedOnOTPScreen",
      "loaded_events": ["ClickedOnOTPScreen"],
      "filters": {
        "event_name": "= 'ClickedOnOTPScreen'"
      }
    },
    {
      "rank": 5,
      "screen_name": "OTPVerifiedSuccess",
      "loaded_events": ["OTPVerifiedSuccess"],
      "filters": {
        "event_name": "= 'OTPVerifiedSuccess'"
      }
    }
  ],
  "filters": [
    "(lower(try_parse_json(properties):analysis_name::string) = 'mf_analyser' and event in ('LoadedConsentScreen','InteractedOnConsentScreen','OTPVerifiedSuccess','LoadedEnterOTPScreen','ClickedOnOTPScreen')) or (event in ('MFPrefillPanScreenLoaded','MFPrefillPanScreenActioned'))"
  ],
  "user_id_column": "actor_id",
  "session_id_column": "session_id",
  "event_column": "event",
  "timestamp_column": "timestamp_ist",
  "partition_column": "partition_column",
  "user_segmentation_fields": ["current_tier", "affluence_v11_flag", "gender", "income_range"],
  "max_step": 5,
  "app_version_extraction": "try_parse_json(app):version::string",
  "os_extraction": "try_parse_json(os):name::string",
  "entry_point_extraction": "try_parse_json(properties):entry_point_v2::string"
} 